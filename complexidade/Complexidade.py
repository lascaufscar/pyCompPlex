# -*- coding: utf-8 -*-
"""
/***************************************************************************
 compplex3
                                 A QGIS plugin
 Cálculo de metricas de complexidade em imagens de SR, por ROIs e por imagem
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-02-06
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Cláudo Bielenki Jr
        email                : bielenki@ufscar.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
#import gdal
import numpy as np
from osgeo import gdal_array, ogr
from osgeo import gdal
import numpy as np
import pandas as pd
import sys, os
import qgis
import rasterio

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QLabel

from qgis.core import QgsMapLayerProxyModel
from qgis.core import QgsMessageLog
from qgis.core import Qgis, QgsVectorLayer, QgsProject


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ComplexROI_dialog import compplex3ROIDialog
from .ComplexJanus_dialog import compplex3JanusDialog
from .ComplexCube_dialog import compplexCubeDialog
import os.path

from .entropia import convolucaoNumba
os.environ['PROJ_LIB']='c:\\osgeo4~1\\apps\\python37\\lib\\site-packages\\pyproj\\proj_dir\\share\\proj'
os.environ['GDAL_DATA']='c:\\osgeo4~1\\apps\\python37\\lib\\site-packages\\pyproj\\proj_dir\\share'


def Complexidade(Vetor):
     lenVet=Vetor.size
     Lista=list(set(Vetor))
     prob=[np.size(Vetor[Vetor==i])/(lenVet*1.0) for i in Lista]
     N=len(prob)*1.0
     He=np.sum([p*np.log2(1/p) for p in prob])
     D=np.sum([(p-(1/N))**2 for p in prob])
     Hmax=np.log2(N)
     C=He/Hmax
     LMC=D*C
     SDL=(1-C)*C
     return He,Hmax,C,SDL,LMC,N
def bbox_to_pixel_offsets(gt, bbox):
     originX = gt[0]
     originY = gt[3]
     pixel_width = gt[1]
     pixel_height = gt[5]
     x1 = int((bbox[0] - originX) / pixel_width)
     x2 = int((bbox[1] - originX) / pixel_width) + 1
     y1 = int((bbox[3] - originY) / pixel_height)
     y2 = int((bbox[2] - originY) / pixel_height) + 1
     xsize = x2 - x1
     ysize = y2 - y1
     return (x1, y1, xsize, ysize)
def zonal_stats(vector_path, raster_path, banda, nodata_value=None, global_src_extent=False):
     rds = gdal.Open(raster_path)
     assert(rds)
     rb = rds.GetRasterBand(banda)
     rgt = rds.GetGeoTransform()
     if nodata_value:
          nodata_value = float(nodata_value)
          rb.SetNoDataValue(nodata_value)
     vds = ogr.Open(vector_path)
     assert(vds)
     vlyr = vds.GetLayer(0)
     if global_src_extent:
          src_offset = bbox_to_pixel_offsets(rgt, vlyr.GetExtent())
          src_array = rb.ReadAsArray(*src_offset)
          new_gt = ((rgt[0] + (src_offset[0] * rgt[1])), rgt[1], 0.0, (rgt[3] + (src_offset[1] * rgt[5])), 0.0, rgt[5] )
     mem_drv = ogr.GetDriverByName('Memory')
     driver = gdal.GetDriverByName('MEM')
     stats = []
     ArrayMasked=[]
     feat = vlyr.GetNextFeature()
     cont=0
     while feat is not None:
          if not global_src_extent:
               src_offset = bbox_to_pixel_offsets(rgt, feat.geometry().GetEnvelope())
               src_array = rb.ReadAsArray(*src_offset)
               new_gt = ((rgt[0] + (src_offset[0] * rgt[1])), rgt[1], 0.0, (rgt[3] + (src_offset[1] * rgt[5])), 0.0, rgt[5])
               mem_ds = mem_drv.CreateDataSource('out')
          mem_layer = mem_ds.CreateLayer('poly', None, ogr.wkbPolygon)
          mem_layer.CreateFeature(feat.Clone())
          rvds = driver.Create('', src_offset[2], src_offset[3], 1, gdal.GDT_Byte)
          rvds.SetGeoTransform(new_gt)
          gdal.RasterizeLayer(rvds, [1], mem_layer, burn_values=[1])
          rv_array = rvds.ReadAsArray()
          masked = np.ma.MaskedArray( src_array, mask=np.logical_or(src_array == nodata_value, np.logical_not(rv_array) ) )
          ArrayMasked.append(masked)
          feature_stats = {'min': float(masked.min()),'mean': float(masked.mean()),'max': float(masked.max()),'std': float(masked.std()),'sum': float(masked.sum()),'count': int(masked.count()),'fid': int(feat.GetFID())}
          stats.append(feature_stats)
          rvds = None
          mem_ds = None
          feat = vlyr.GetNextFeature()
          cont=cont+1
     ds = None
     ds = None
     return stats, ArrayMasked, cont

def convolucaoCube (listArray, rows, cols, imagens):
    arrayHe = np.empty((rows,cols), dtype=float)
    arrayHemax = np.empty((rows,cols), dtype=float)
    arraySDL = np.empty((rows,cols), dtype=float)
    arrayLMC = np.empty((rows,cols), dtype=float)
    i=0
    for row in range(rows):

        for col in range(cols):
            mascara=[]
            for imagem in range(imagens):
                mascara.append(listArray[imagem][row][col])
            mascara.sort()
            if i<5: print(mascara)
            He=0.0
            lenVet=len(mascara)
            Lista=list(set(mascara))
            Lista.sort()
            if i<5: print(Lista)
            if len(Lista)==1 and Lista.count(0)==1:
                arrayHe[row,col]=0
            else:
                prob=[(mascara.count(i))/(lenVet*1.0) for i in Lista]
                if i<5: print(prob)
                for p in prob:
                    if p>0:
                        He += -1.0*p*np.log2(p)
                arrayHe[row,col]=He

                N=len(Lista)*1.0
                if N == 1:
                    C=0
                else:
                    Hmax=np.log2(N)
                    C=He/Hmax
                arrayHemax[row,col]=C
                SDL=(1-C)*C
                arraySDL[row,col]=SDL
                D = 0.0
                for p in prob:
                    D += (p-(1/N))**2
                LMC=D*C
                arrayLMC[row,col]=LMC
                i+=1

    return (arrayHe, arrayHemax, arraySDL, arrayLMC)


class compplex3:


    def __init__(self, iface):

        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'compplex3_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        #self.menu = self.tr(u'&CompPlex')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):

        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('compplex3', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=False,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):


        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.toolBar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def hello(self):
        self.iface.messageBar().pushMessage(u'Welcome to CompPlex Tools', level=Qgis.Info, duration=3)

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        self.toolBar = self.iface.addToolBar("CompPlex Tools")
        self.toolBar.setObjectName("compplexTools")

        icon_path4 = ':/plugins/Complexidade/logoDHB.png'
        self.add_action(
            icon_path4,
            text=self.tr(u'CompPlex Tools'),
            callback=self.hello,
            parent=self.iface.mainWindow())


        drainageLabel=QLabel(self.toolBar)
        drainageLabel.setText("CompPlex Tools: ")
        self.toolBar.addWidget(drainageLabel)


        icon_path = ':/plugins/Complexidade/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'CompPlex HeROI'),
            callback=self.runROI,
            parent=self.iface.mainWindow())
        icon_path2 = ':/plugins/Complexidade/iconA.png'
        self.add_action(
            icon_path2,
            text=self.tr(u'CompPlex Janus'),
            callback=self.runJanus,
            parent=self.iface.mainWindow())
        # will be set False in run()

        icon_path3 = ':/plugins/Complexidade/icon80G.png'
        self.add_action(
            icon_path3,
            text=self.tr(u'CompPlex Chronos'),
            callback=self.runCube,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CompPlex'),
                action)
            self.iface.removeToolBarIcon(action)

    def selecionar_saida(self):
        arquivoCaminho = QFileDialog.getSaveFileName(self.dlg, "Salvar o arquivo em: ", "", "*.csv")
        self.dlg.caminho.setText(arquivoCaminho[0])

    def selecionar_saidaTiff(self):
        arquivoCaminho = QFileDialog.getSaveFileName(self.dlg, "Salvar o arquivo em: ", "", "*.tif")
        self.dlg.caminho.setText(arquivoCaminho[0])

    def selecionar_inputTiff(self):
            arquivoCaminho = QFileDialog.getExistingDirectory(self.dlg, 'Select a directory to Rasters Input') #QFileDialog.getSaveFileName(self.dlg, "Salvar o arquivo em: ", "", "*.tif")
            self.dlg.caminhoRID.setText(arquivoCaminho)#[0])

    def selecionar_outputTiff(self):
            arquivoCaminho = QFileDialog.getExistingDirectory(self.dlg, 'Select a directory to Rasters Output') #QFileDialog.getSaveFileName(self.dlg, "Salvar o arquivo em: ", "", "*.tif")
            self.dlg.caminhoROD.setText(arquivoCaminho)#[0])

    def runROI(self):
        """Run method that performs all the real work"""
        self.dlg = compplex3ROIDialog()
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
        self.dlg.pushButton.clicked.connect(self.selecionar_saida)
        self.dlg.mMapLayerComboBox_2.setFilters(QgsMapLayerProxyModel.VectorLayer)
        self.dlg.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.dlg.caminho.clear()
        # show the dialog
        self.dlg.show()

        layersP=[]
        layers = qgis.core.QgsProject.instance().layerTreeRoot().layerOrder()
        for item in layers:
            layerType = item.type()
            if layerType == qgis.core.QgsMapLayer.VectorLayer:
                if item.geometryType()==qgis.core.QgsWkbTypes.PolygonGeometry:
                    layersP.append(item)
        selectedLayerIndex = self.dlg.mMapLayerComboBox_2.currentIndex()
        layer=layersP[selectedLayerIndex]
        self.dlg.mFieldComboBox.setLayer(layer)
        self.dlg.mMapLayerComboBox_2.layerChanged.connect(self.dlg.mFieldComboBox.setLayer)

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            Saida = self.dlg.caminho.text()
            NameSHP=(self.dlg.mMapLayerComboBox_2.currentLayer().dataProvider().dataSourceUri()).split('|')[0]
            NameImagem=self.dlg.mMapLayerComboBox.currentLayer().dataProvider().dataSourceUri()
            mField=self.dlg.mFieldComboBox.currentField()
            QgsMessageLog.logMessage(Saida, tag="Processing", level=Qgis.Info)
            QgsMessageLog.logMessage(NameSHP, tag="Processing", level=Qgis.Info)
            QgsMessageLog.logMessage(NameImagem, tag="Processing", level=Qgis.Info)
            QgsMessageLog.logMessage(mField, tag="Processing", level=Qgis.Info)
            SHP = ogr.Open(NameSHP)
            layer = SHP.GetLayer()
            FeatureCount=layer.GetFeatureCount()
            imagem = gdal.Open(NameImagem)

            NrBandas = imagem.RasterCount
            colNames=['Banda','Regiao','He','Hmax','He/Hmax','SDL','LMC','DNCount','N','DNmax','DNmin','DNmean','DNstd']
            df_Results  = pd.DataFrame(columns = colNames)
            for band in range(NrBandas):
                 band +=1
                 stats = zonal_stats(NameSHP, NameImagem, band)
                 x = stats[1]
                 for iter in range(FeatureCount):
                      Class=layer.GetFeature(iter).GetField(mField)
                      y=x[iter].flatten()
                      Comp=Complexidade(y.compressed())
                      EstDescritivas=stats[0][iter]
                      df_Results.loc[len(df_Results)] = [band,Class,Comp[0],Comp[1],Comp[2],Comp[3],Comp[4], EstDescritivas['count'],Comp[5],EstDescritivas['max'],EstDescritivas['min'],EstDescritivas['mean'],EstDescritivas['std']]

            df_Results.to_csv(Saida, encoding='utf-8', index=False)

            csv = QgsVectorLayer(Saida,'Resultado', 'ogr')
            QgsProject.instance().addMapLayer(csv)
            self.iface.mapCanvas().refresh()
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
    def runJanus(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
        self.dlg = compplex3JanusDialog()
        self.dlg.pushButton.clicked.connect(self.selecionar_saidaTiff)

        self.dlg.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.dlg.caminho.clear()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:

            NameImagem=self.dlg.mMapLayerComboBox.currentLayer().dataProvider().dataSourceUri()
            Janela = ((self.dlg.cbJanela.currentIndex()+1)*2)+1
            Metrica = self.dlg.cbMetrica.currentIndex()
            outFN = self.dlg.caminho.text()
            Im=gdal.Open(NameImagem)
            cols=Im.RasterXSize
            rows=Im.RasterYSize
            NrBandas = Im.RasterCount
            kernel=Janela - 2
            opcao=Metrica

            for band in range(NrBandas):
                band +=1
                banda_img=Im.GetRasterBand(band)
                #NoData = banda_img.GetNoDataValue()
                ImArray=banda_img.ReadAsArray().astype(np.float)
                EE=np.array(ImArray)
                ES=convolucaoNumba(EE, ImArray, rows, cols, kernel, opcao)
                driver = gdal.GetDriverByName('GTiff')
                outDS = driver.Create(outFN.replace(".tif","")+"_B"+str(band)+".tif", cols, rows, 1, gdal.GDT_Float32)
                outDS.SetGeoTransform(Im.GetGeoTransform())
                outDS.SetProjection(Im.GetProjection())
                outBand = outDS.GetRasterBand(1)
                outBand.WriteArray(ES)
                del(outDS)
                del(EE)
                del(ES)
                del(ImArray)
            del(Im)
            pass

    def runCube(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
        self.dlg = compplexCubeDialog()

        self.dlg.pbRID.clicked.connect(self.selecionar_inputTiff)
        self.dlg.pbROD.clicked.connect(self.selecionar_outputTiff)

        self.dlg.caminhoRID.clear()
        self.dlg.caminhoROD.clear()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            gdal.AllRegister()
            inputRasters = self.dlg.caminhoRID.text()
            raster_paths = []
            for root, dirs, files in os.walk(inputRasters):
                for single_file in files:
                    if single_file.endswith('.tif'):
                        inpt_raster = os.path.join(root, single_file)
                        raster_paths.append(inpt_raster)

            listRasterArrays = []

            for path in raster_paths:
                Im=gdal.Open(path)
                banda_img=Im.GetRasterBand(1)
                listRasterArrays.append(banda_img.ReadAsArray())

            nrRows = Im.RasterYSize
            nrCols = Im.RasterXSize
            nrImagens = len(listRasterArrays)

            output=convolucaoCube(listRasterArrays, nrRows, nrCols, nrImagens)

            saida = self.dlg.caminhoROD.text()

            with rasterio.open(raster_paths[0]) as src:
                ras_meta = src.profile
            ras_meta['dtype']='float32'

            outHe = rasterio.open(saida+"\Imagem_He.tif", 'w', **ras_meta)
            outHe.write(output[0], 1)
            outHe.close()

            outHeMax = rasterio.open(saida+"\Imagem_HeMax.tif", 'w', **ras_meta)
            outHeMax.write(output[1], 1)
            outHeMax.close()

            outSDL = rasterio.open(saida+"\Imagem_SDL.tif", 'w', **ras_meta)
            outSDL.write(output[2], 1)
            outSDL.close()

            outLMC = rasterio.open(saida+"\Imagem_LMC.tif", 'w', **ras_meta)
            outLMC.write(output[3], 1)
            outLMC.close()

            pass